//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Controles"",
            ""id"": ""4dcdb9c0-4a4c-45a6-aab1-e439aa2b456e"",
            ""actions"": [
                {
                    ""name"": ""Movimiento"",
                    ""type"": ""PassThrough"",
                    ""id"": ""84ee5b85-23ca-4867-a624-43172b03605d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Disparo"",
                    ""type"": ""Button"",
                    ""id"": ""a27ca5f8-ba88-4897-acc4-eadd5fe92d78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed25d63f-f197-42e6-9583-663f62a8c7fd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feb98f2e-fdbc-478f-88e5-4c6e01743bb8"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""7a44c4ba-6a17-47f8-9195-7b8a7955fe03"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2f4762a2-fb77-41d6-a114-8d6453ba9863"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Teclado"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""681366df-f02a-432a-977b-72e1f864a765"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Teclado"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fdecb8c5-e388-455e-8f4f-0542faf4aab0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Teclado"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""49a7d1c7-bf4e-4a75-89de-a452d2a139c6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Teclado"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3662456f-8276-464a-97e9-14d28f467c72"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Disparo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4125fa46-3e01-4072-b16e-0167c3904b7a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Disparo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Teclado"",
            ""bindingGroup"": ""Teclado"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controles
        m_Controles = asset.FindActionMap("Controles", throwIfNotFound: true);
        m_Controles_Movimiento = m_Controles.FindAction("Movimiento", throwIfNotFound: true);
        m_Controles_Disparo = m_Controles.FindAction("Disparo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controles
    private readonly InputActionMap m_Controles;
    private List<IControlesActions> m_ControlesActionsCallbackInterfaces = new List<IControlesActions>();
    private readonly InputAction m_Controles_Movimiento;
    private readonly InputAction m_Controles_Disparo;
    public struct ControlesActions
    {
        private @PlayerControls m_Wrapper;
        public ControlesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimiento => m_Wrapper.m_Controles_Movimiento;
        public InputAction @Disparo => m_Wrapper.m_Controles_Disparo;
        public InputActionMap Get() { return m_Wrapper.m_Controles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesActions set) { return set.Get(); }
        public void AddCallbacks(IControlesActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlesActionsCallbackInterfaces.Add(instance);
            @Movimiento.started += instance.OnMovimiento;
            @Movimiento.performed += instance.OnMovimiento;
            @Movimiento.canceled += instance.OnMovimiento;
            @Disparo.started += instance.OnDisparo;
            @Disparo.performed += instance.OnDisparo;
            @Disparo.canceled += instance.OnDisparo;
        }

        private void UnregisterCallbacks(IControlesActions instance)
        {
            @Movimiento.started -= instance.OnMovimiento;
            @Movimiento.performed -= instance.OnMovimiento;
            @Movimiento.canceled -= instance.OnMovimiento;
            @Disparo.started -= instance.OnDisparo;
            @Disparo.performed -= instance.OnDisparo;
            @Disparo.canceled -= instance.OnDisparo;
        }

        public void RemoveCallbacks(IControlesActions instance)
        {
            if (m_Wrapper.m_ControlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlesActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlesActions @Controles => new ControlesActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TecladoSchemeIndex = -1;
    public InputControlScheme TecladoScheme
    {
        get
        {
            if (m_TecladoSchemeIndex == -1) m_TecladoSchemeIndex = asset.FindControlSchemeIndex("Teclado");
            return asset.controlSchemes[m_TecladoSchemeIndex];
        }
    }
    public interface IControlesActions
    {
        void OnMovimiento(InputAction.CallbackContext context);
        void OnDisparo(InputAction.CallbackContext context);
    }
}
